// <auto-generated />
using System;
using API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StreamTrack.Migrations
{
    [DbContext(typeof(StreamTrackDbContext))]
    [Migration("20250624051927_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("API.Models.Content", b =>
                {
                    b.Property<string>("ContentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cast")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Directors")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HorizontalPoster")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IMDB_ID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Runtime")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShowType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TMDB_ID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VerticalPoster")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContentID");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("API.Models.Genre", b =>
                {
                    b.Property<string>("GenreID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreID = "1",
                            IsDeleted = false,
                            Name = "Action"
                        },
                        new
                        {
                            GenreID = "2",
                            IsDeleted = false,
                            Name = "Comedy"
                        },
                        new
                        {
                            GenreID = "3",
                            IsDeleted = false,
                            Name = "Drama"
                        },
                        new
                        {
                            GenreID = "4",
                            IsDeleted = false,
                            Name = "Horror"
                        },
                        new
                        {
                            GenreID = "5",
                            IsDeleted = false,
                            Name = "Romance"
                        },
                        new
                        {
                            GenreID = "6",
                            IsDeleted = false,
                            Name = "Rom-Com"
                        },
                        new
                        {
                            GenreID = "7",
                            IsDeleted = false,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            GenreID = "8",
                            IsDeleted = false,
                            Name = "Thriller"
                        },
                        new
                        {
                            GenreID = "9",
                            IsDeleted = false,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("API.Models.List", b =>
                {
                    b.Property<string>("ListID")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerUserID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("ListID");

                    b.HasIndex("OwnerUserID");

                    b.ToTable("List");
                });

            modelBuilder.Entity("API.Models.ListShares", b =>
                {
                    b.Property<string>("ListID")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ListID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("ListShares");
                });

            modelBuilder.Entity("API.Models.StreamingOption", b =>
                {
                    b.Property<string>("ContentID")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(0);

                    b.Property<string>("ServiceID")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("DeepLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ContentID", "ServiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("StreamingOption");
                });

            modelBuilder.Entity("API.Models.StreamingService", b =>
                {
                    b.Property<string>("ServiceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("DarkLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LightLogo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ServiceID");

                    b.ToTable("StreamingService");

                    b.HasData(
                        new
                        {
                            ServiceID = "1",
                            DarkLogo = "https://media.movieofthenight.com/services/netflix/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/netflix/logo-light-theme.svg",
                            Name = "Netflix"
                        },
                        new
                        {
                            ServiceID = "2",
                            DarkLogo = "https://media.movieofthenight.com/services/hulu/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/hulu/logo-light-theme.svg",
                            Name = "Hulu"
                        },
                        new
                        {
                            ServiceID = "3",
                            DarkLogo = "https://media.movieofthenight.com/services/max/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/max/logo-light-theme.svg",
                            Name = "HBO Max"
                        },
                        new
                        {
                            ServiceID = "4",
                            DarkLogo = "https://media.movieofthenight.com/services/prime/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/prime/logo-light-theme.svg",
                            Name = "Amazon Prime"
                        },
                        new
                        {
                            ServiceID = "5",
                            DarkLogo = "https://media.movieofthenight.com/services/disney/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/disney/logo-light-theme.svg",
                            Name = "Disney+"
                        },
                        new
                        {
                            ServiceID = "6",
                            DarkLogo = "https://media.movieofthenight.com/services/apple/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/apple/logo-light-theme.svg",
                            Name = "Apple TV"
                        },
                        new
                        {
                            ServiceID = "7",
                            DarkLogo = "https://media.movieofthenight.com/services/paramount/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/paramount/logo-light-theme.svg",
                            Name = "Paramount+"
                        },
                        new
                        {
                            ServiceID = "8",
                            DarkLogo = "https://media.movieofthenight.com/services/peacock/logo-dark-theme.svg",
                            IsDeleted = false,
                            LightLogo = "https://media.movieofthenight.com/services/peacock/logo-light-theme.svg",
                            Name = "Peacock"
                        });
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ContentGenre", b =>
                {
                    b.Property<string>("ContentsContentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenresGenreID")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentsContentID", "GenresGenreID");

                    b.HasIndex("GenresGenreID");

                    b.ToTable("ContentGenre", (string)null);
                });

            modelBuilder.Entity("ContentList", b =>
                {
                    b.Property<string>("ContentsContentID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ListsListID")
                        .HasColumnType("TEXT");

                    b.HasKey("ContentsContentID", "ListsListID");

                    b.HasIndex("ListsListID");

                    b.ToTable("ListContent", (string)null);
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.Property<string>("GenresGenreID")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersUserID")
                        .HasColumnType("TEXT");

                    b.HasKey("GenresGenreID", "UsersUserID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("UserGenre", (string)null);
                });

            modelBuilder.Entity("StreamingServiceUser", b =>
                {
                    b.Property<string>("StreamingServicesServiceID")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersUserID")
                        .HasColumnType("TEXT");

                    b.HasKey("StreamingServicesServiceID", "UsersUserID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("UserService", (string)null);
                });

            modelBuilder.Entity("API.Models.List", b =>
                {
                    b.HasOne("API.Models.User", "Owner")
                        .WithMany("ListsOwned")
                        .HasForeignKey("OwnerUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("API.Models.ListShares", b =>
                {
                    b.HasOne("API.Models.List", "List")
                        .WithMany("ListShares")
                        .HasForeignKey("ListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", "User")
                        .WithMany("ListShares")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("List");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Models.StreamingOption", b =>
                {
                    b.HasOne("API.Models.Content", "Content")
                        .WithMany("StreamingOptions")
                        .HasForeignKey("ContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.StreamingService", "StreamingService")
                        .WithMany("StreamingOptions")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("StreamingService");
                });

            modelBuilder.Entity("ContentGenre", b =>
                {
                    b.HasOne("API.Models.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentsContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentList", b =>
                {
                    b.HasOne("API.Models.Content", null)
                        .WithMany()
                        .HasForeignKey("ContentsContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.List", null)
                        .WithMany()
                        .HasForeignKey("ListsListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreUser", b =>
                {
                    b.HasOne("API.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StreamingServiceUser", b =>
                {
                    b.HasOne("API.Models.StreamingService", null)
                        .WithMany()
                        .HasForeignKey("StreamingServicesServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Content", b =>
                {
                    b.Navigation("StreamingOptions");
                });

            modelBuilder.Entity("API.Models.List", b =>
                {
                    b.Navigation("ListShares");
                });

            modelBuilder.Entity("API.Models.StreamingService", b =>
                {
                    b.Navigation("StreamingOptions");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Navigation("ListShares");

                    b.Navigation("ListsOwned");
                });
#pragma warning restore 612, 618
        }
    }
}
